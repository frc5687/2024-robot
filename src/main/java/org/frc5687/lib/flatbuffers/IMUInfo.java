// automatically generated by the FlatBuffers compiler, do not modify

package org.frc5687.lib.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class IMUInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static IMUInfo getRootAsIMUInfo(ByteBuffer _bb) { return getRootAsIMUInfo(_bb, new IMUInfo()); }
  public static IMUInfo getRootAsIMUInfo(ByteBuffer _bb, IMUInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IMUInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float x() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float y() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float z() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long timestamp() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createIMUInfo(FlatBufferBuilder builder,
      int id,
      float x,
      float y,
      float z,
      long timestamp) {
    builder.startTable(5);
    IMUInfo.addTimestamp(builder, timestamp);
    IMUInfo.addZ(builder, z);
    IMUInfo.addY(builder, y);
    IMUInfo.addX(builder, x);
    IMUInfo.addId(builder, id);
    return IMUInfo.endIMUInfo(builder);
  }

  public static void startIMUInfo(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addX(FlatBufferBuilder builder, float x) { builder.addFloat(1, x, 0.0f); }
  public static void addY(FlatBufferBuilder builder, float y) { builder.addFloat(2, y, 0.0f); }
  public static void addZ(FlatBufferBuilder builder, float z) { builder.addFloat(3, z, 0.0f); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(4, timestamp, 0L); }
  public static int endIMUInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIMUInfoBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedIMUInfoBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IMUInfo get(int j) { return get(new IMUInfo(), j); }
    public IMUInfo get(IMUInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

